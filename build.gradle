import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

plugins {
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
    id 'scala'
    id 'application'
    id 'distribution'
}

description = 'A eqx application'
group = 'com.tvd.eqx'
version = theVersion

// Verify the user has a Gradle version capable of the build.
assert gradle.gradleVersion >= '8.1', 'This Build only works with Gradle Version 8.1 or above'

java {
    sourceCompatibility = JavaVersion.VERSION_23
}

application {
    mainClass.set("com.tvd.eqx.WebServer")
}

repositories {
    mavenCentral()
}

ext {
    scalaVersion         = '3.6.1'
    akkaVersion          = '2.8.7'
    akkaHttpVersion      = '10.5.3'
    logbackVersion       = '1.5.11'
    configVersion        = '1.4.3'
    slickVersion         = '3.5.2'
    seleniumVersion      = '4.25.0'

    scalatestVersion     = '3.2.19'
    scalamockVersion     = '6.0.0'
    scalatestplusVersion = '3.2.19.0'
}

configurations {
    compile
}

dependencies {
    implementation group: 'org.scala-lang',         name: 'scala3-library_3',             version: scalaVersion
    implementation group: 'com.typesafe.akka',      name: 'akka-actor_3',                 version: akkaVersion
    implementation group: 'com.typesafe.akka',      name: 'akka-stream_3',                version: akkaVersion
    implementation group: 'com.typesafe.akka',      name: 'akka-http_3',                  version: akkaHttpVersion
    implementation group: 'com.typesafe.akka',      name: 'akka-serialization-jackson_3', version: akkaVersion

    implementation group: 'com.typesafe',           name: 'config',                       version: configVersion
    implementation group: 'com.typesafe.akka',      name: 'akka-slf4j_3',                 version: akkaVersion
    implementation group: 'ch.qos.logback',         name: 'logback-classic',              version: logbackVersion

    implementation group: 'com.typesafe.slick',     name: 'slick_3' ,                     version: slickVersion
    implementation group: 'org.seleniumhq.selenium',name: 'selenium-java',                version: seleniumVersion

    testImplementation group: 'org.scalamock',      name: 'scalamock_3',                  version: scalamockVersion
    testImplementation group: 'org.scalatestplus',  name: 'junit-4-13_3',                 version: scalatestplusVersion
    testImplementation group: 'org.scalatest',      name: 'scalatest_3',                  version: scalatestVersion
    testImplementation group: 'com.typesafe.akka',  name: 'akka-testkit_3',               version: akkaVersion
    testImplementation group: 'com.typesafe.akka',  name: 'akka-stream-testkit_3',        version: akkaVersion
    testImplementation group: 'com.typesafe.akka',  name: 'akka-http-testkit_3',          version: akkaHttpVersion
}

tasks.register('buildImage', DockerBuildImage) {
    dependsOn build
    inputDir.set(file('Dockerfile').parentFile)
    images.add("eqx:${theVersion}")
}

tasks.register('createContainer', DockerCreateContainer) {
    dependsOn buildImage
    targetImageId buildImage.getImageId()

    hostConfig.portBindings.set(['8383:8383'])
    hostConfig.autoRemove.set(false)
    exposedPorts.add(new DockerCreateContainer.ExposedPort("tcp", [8383]))
    containerName.set('eqx')
    tty.set(true)
    entrypoint.set(['bash', '-c', 'bin/eqx'])
}

tasks.register('startContainer', DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}

tasks.register('logContainer', DockerLogsContainer) {
    dependsOn startContainer
    targetContainerId startContainer.getContainerId()

    follow.set(true)
    tailAll.set(true)
    onNext { message ->
        logger.quiet message.toString()
    }
}

tasks.register('stopContainer', DockerStopContainer) {
    dependsOn startContainer
    targetContainerId startContainer.getContainerId()
}

tasks.register('removeContainer', DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId stopContainer.getContainerId()

    onError { exception ->
        // Ignore exception if container does not exist otherwise throw it
        if (!exception.message.contains('No such container'))
            throw exception
    }
    onComplete {
        println 'Container has been removed'
    }
    doLast {
        println 'Done'
    }
}

tasks.register('runTests', DockerExecContainer) {
    dependsOn startContainer
    finalizedBy removeContainer
    targetContainerId startContainer.getContainerId()

    withCommand(['/bin/bash', '-c', 'curl -v http://localhost:8383/eqx/status'])
    withCommand(['echo', 'Hello World Two'])
    withCommand(['echo', 'Hello World Three'])

    doFirst {
        sleep(10 * 1000)
    }
    doLast {
        logger.quiet "FOUND EXEC-IDS: " + execIds.get().size()
    }
}
